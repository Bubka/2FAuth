{"version":3,"file":"WebAuthn-BFhBaNh0.js","sources":["../../../resources/js/views/settings/WebAuthn.vue"],"sourcesContent":["<script setup>\n    import SettingTabs from '@/layouts/SettingTabs.vue'\n    import userService from '@/services/userService'\n    import { webauthnService } from '@/services/webauthn/webauthnService'\n    import { useAppSettingsStore } from '@/stores/appSettings'\n    import { useUserStore } from '@/stores/user'\n    import { useNotifyStore } from '@/stores/notify'\n    import { UseColorMode } from '@vueuse/components'\n    import Spinner from '@/components/Spinner.vue'\n\n    const $2fauth = inject('2fauth')\n    const user = useUserStore()\n    const appSettings = useAppSettingsStore()\n    const notify = useNotifyStore()\n    const router = useRouter()\n    const returnTo = useStorage($2fauth.prefix + 'returnTo', 'accounts')\n\n    const credentials = ref([])\n    const isFetching = ref(false)\n\n    const isDisabled = computed(() => {\n        return (appSettings.enableSso && appSettings.useSsoOnly) || user.authenticated_by_proxy\n    })\n    \n    onMounted(() => {\n        fetchCredentials()\n    })\n\n    watch(() => user.preferences.useWebauthnOnly, () => {\n        userService.updatePreference('useWebauthnOnly', user.preferences.useWebauthnOnly).then(response => {\n            notify.success({ text: trans('settings.forms.setting_saved') })\n        })\n    })\n\n    /**\n     * Register a new security device\n     */\n    function register() {\n        if (isDisabled.value == true) {\n            notify.warn({text: trans('errors.unsupported_with_reverseproxy') })\n            return false\n        }\n\n        webauthnService.register().then((response) => {\n            router.push({ name: 'settings.webauthn.editCredential', params: { credentialId: JSON.parse(response.config.data).id } })\n        })\n        .catch(error => {\n            if ('webauthn' in error) {\n                if (error.name == 'is-warning') {\n                    notify.warn({ text: trans(error.message) })\n                }\n                else notify.alert({ text: trans(error.message) })\n            }\n            else if( error.response?.status === 422 ) {\n                notify.alert({ text: error.response.data.message })\n            }\n            else {\n                notify.error(error);\n            }\n        })\n    }\n\n    /**\n     * revoke a credential\n     */\n    function revokeCredential(credentialId) {\n        if(confirm(trans('auth.confirm.revoke_device'))) {\n            userService.revokeWebauthnDevice(credentialId).then(response => {\n                // Remove the revoked credential from the collection\n                credentials.value = credentials.value.filter(a => a.id !== credentialId)\n\n                // Then we disable the useWebauthnOnly preference which is relevant\n                // only when at least one device is registered\n                if (credentials.value.length == 0) {\n                    user.preferences.useWebauthnOnly = false\n                }\n\n                notify.success({ text: trans('auth.webauthn.device_revoked') })\n            });\n        }\n    }\n\n    /**\n     * Always display a printable name\n     */\n    function displayName(credential) {\n        return credential.alias ? credential.alias : trans('auth.webauthn.my_device') + ' (#' + credential.id.substring(0, 10) + ')'\n    }\n\n    /**\n     * Get all credentials from backend\n     */\n    function fetchCredentials() {\n        isFetching.value = true\n\n        userService.getWebauthnDevices({returnError: true})\n        .then(response => {\n            credentials.value = response.data\n        })\n        .catch(error => {\n            if( error.response.status === 403 ) {\n                // The backend returns a 403 response if the user is authenticated by a reverse proxy\n                // or if SSO only is enabled.\n                // The form is already disabled (see isDisabled) so we do nothing more here\n            }\n            else {\n                notify.error(error)\n            }\n        })\n        .finally(() => {\n            isFetching.value = false\n        })\n    }\n\n    onBeforeRouteLeave((to) => {\n        if (! to.name.startsWith('settings.')) {\n            notify.clear()\n        }\n    })\n</script>\n\n<template>\n    <div>\n        <SettingTabs :activeTab=\"'settings.webauthn.devices'\" />\n        <div class=\"options-tabs\">\n            <FormWrapper>\n                <div v-if=\"isDisabled && user.oauth_provider\" class=\"notification is-warning has-text-centered\">\n                    {{ $t('auth.sso_only_x_settings_are_disabled', { auth_method: 'WebAuthn' }) }}\n                </div>\n                <div v-if=\"isDisabled && user.authenticated_by_proxy\" class=\"notification is-warning has-text-centered\" v-html=\"$t('auth.auth_handled_by_proxy')\" />\n                <h4 class=\"title is-4 has-text-grey-light\">{{ $t('auth.webauthn.security_devices') }}</h4>\n                <div class=\"is-size-7-mobile\">\n                    {{ $t('auth.webauthn.security_devices_legend')}}\n                </div>\n                <div class=\"mt-3\">\n                    <a tabindex=\"0\" @click=\"register\" @keyup.enter=\"register\">\n                        <FontAwesomeIcon :icon=\"['fas', 'plus-circle']\" />&nbsp;{{ $t('auth.webauthn.register_a_new_device')}}\n                    </a>\n                </div>\n                <!-- credentials list -->\n                <div v-if=\"credentials.length > 0\" class=\"field\">\n                    <div v-for=\"credential in credentials\" :key=\"credential.id\" class=\"group-item is-size-5 is-size-6-mobile\">\n                        {{ displayName(credential) }}\n                        <!-- revoke link -->\n                        <UseColorMode v-slot=\"{ mode }\">\n                            <button type=\"button\" class=\"button tag is-pulled-right\" :class=\"mode === 'dark' ? 'is-dark':'is-white'\" @click=\"revokeCredential(credential.id)\" :title=\"$t('settings.revoke')\">\n                                {{ $t('settings.revoke') }}\n                            </button>\n                        </UseColorMode>\n                        <!-- edit link -->\n                        <!-- <RouterLink :to=\"{ name: '' }\" class=\"has-text-grey pl-1\" :title=\"$t('commons.rename')\">\n                            <FontAwesomeIcon :icon=\"['fas', 'pen-square']\" />\n                        </RouterLink> -->\n                    </div>\n                    <div class=\"mt-2 is-size-7 is-pulled-right\">\n                        {{ $t('auth.webauthn.revoking_a_device_is_permanent')}}\n                    </div>\n                </div>\n                <Spinner :isVisible=\"isFetching && credentials.length === 0\" />\n                <h4 class=\"title is-4 pt-6 has-text-grey-light\">{{ $t('auth.webauthn.options') }}</h4>\n                <div class=\"field\">\n                    {{ $t('auth.webauthn.need_a_security_device_to_enable_options')}}\n                </div>\n                <form>\n                    <!-- use webauthn only -->\n                    <FormCheckbox\n                        v-model=\"user.preferences.useWebauthnOnly\"\n                        fieldName=\"useWebauthnOnly\"\n                        label=\"auth.webauthn.use_webauthn_only.label\"\n                        help=\"auth.webauthn.use_webauthn_only.help\"\n                        :isDisabled=\"isDisabled || credentials.length === 0\"\n                    />\n                </form>\n                <!-- footer -->\n                <VueFooter :showButtons=\"true\">\n                    <ButtonBackCloseCancel :returnTo=\"{ name: returnTo }\" action=\"close\" />\n                </VueFooter>\n            </FormWrapper>\n        </div>\n    </div>\n</template>"],"names":["$2fauth","inject","user","useUserStore","appSettings","useAppSettingsStore","notify","useNotifyStore","router","useRouter","returnTo","useStorage","credentials","ref","isFetching","isDisabled","computed","onMounted","fetchCredentials","watch","userService","response","trans","register","webauthnService","error","_a","revokeCredential","credentialId","a","displayName","credential","onBeforeRouteLeave","to"],"mappings":"i1BAUI,MAAMA,EAAUC,EAAO,QAAQ,EACzBC,EAAOC,EAAY,EACnBC,EAAcC,EAAmB,EACjCC,EAASC,EAAc,EACvBC,EAASC,EAAS,EAClBC,EAAWC,EAAWX,EAAQ,OAAS,WAAY,UAAU,EAE7DY,EAAcC,EAAI,CAAE,CAAA,EACpBC,EAAaD,EAAI,EAAK,EAEtBE,EAAaC,EAAS,IAChBZ,EAAY,WAAaA,EAAY,YAAeF,EAAK,sBACpE,EAEDe,EAAU,IAAM,CACZC,EAAgB,CACnB,CAAA,EAEDC,EAAM,IAAMjB,EAAK,YAAY,gBAAiB,IAAM,CAChDkB,EAAY,iBAAiB,kBAAmBlB,EAAK,YAAY,eAAe,EAAE,KAAKmB,GAAY,CAC/Ff,EAAO,QAAQ,CAAE,KAAMgB,EAAM,8BAA8B,CAAG,CAAA,CACjE,CAAA,CACJ,CAAA,EAKD,SAASC,GAAW,CAChB,GAAIR,EAAW,OAAS,GACpB,OAAAT,EAAO,KAAK,CAAC,KAAMgB,EAAM,sCAAsC,CAAG,CAAA,EAC3D,GAGXE,EAAgB,SAAQ,EAAG,KAAMH,GAAa,CAC1Cb,EAAO,KAAK,CAAE,KAAM,mCAAoC,OAAQ,CAAE,aAAc,KAAK,MAAMa,EAAS,OAAO,IAAI,EAAE,EAAE,CAAI,CAAA,CAC1H,CAAA,EACA,MAAMI,GAAS,OACR,aAAcA,EACVA,EAAM,MAAQ,aACdnB,EAAO,KAAK,CAAE,KAAMgB,EAAMG,EAAM,OAAO,CAAG,CAAA,EAEzCnB,EAAO,MAAM,CAAE,KAAMgB,EAAMG,EAAM,OAAO,CAAG,CAAA,IAE3CC,EAAAD,EAAM,WAAN,YAAAC,EAAgB,UAAW,IAChCpB,EAAO,MAAM,CAAE,KAAMmB,EAAM,SAAS,KAAK,OAAS,CAAA,EAGlDnB,EAAO,MAAMmB,CAAK,CAEzB,CAAA,CACT,CAKI,SAASE,EAAiBC,EAAc,CACjC,QAAQN,EAAM,4BAA4B,CAAC,GAC1CF,EAAY,qBAAqBQ,CAAY,EAAE,KAAKP,GAAY,CAE5DT,EAAY,MAAQA,EAAY,MAAM,OAAOiB,GAAKA,EAAE,KAAOD,CAAY,EAInEhB,EAAY,MAAM,QAAU,IAC5BV,EAAK,YAAY,gBAAkB,IAGvCI,EAAO,QAAQ,CAAE,KAAMgB,EAAM,8BAA8B,CAAG,CAAA,CAC9E,CAAa,CAEb,CAKI,SAASQ,EAAYC,EAAY,CAC7B,OAAOA,EAAW,MAAQA,EAAW,MAAQT,EAAM,yBAAyB,EAAI,MAAQS,EAAW,GAAG,UAAU,EAAG,EAAE,EAAI,GACjI,CAKI,SAASb,GAAmB,CACxBJ,EAAW,MAAQ,GAEnBM,EAAY,mBAAmB,CAAC,YAAa,EAAI,CAAC,EACjD,KAAKC,GAAY,CACdT,EAAY,MAAQS,EAAS,IAChC,CAAA,EACA,MAAMI,GAAS,CACRA,EAAM,SAAS,SAAW,KAM1BnB,EAAO,MAAMmB,CAAK,CAEzB,CAAA,EACA,QAAQ,IAAM,CACXX,EAAW,MAAQ,EACtB,CAAA,CACT,CAEI,OAAAkB,EAAoBC,GAAO,CACjBA,EAAG,KAAK,WAAW,WAAW,GAChC3B,EAAO,MAAK,CAEnB,CAAA"}